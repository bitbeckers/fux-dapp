type User @entity {
  id: ID!
  fuxer: Boolean!
  balances: [UserBalance!] @derivedFrom(field: "user")
  workstreams: [WorkstreamContributor!] @derivedFrom(field: "contributor")
  evaluations: [Evaluation!] @derivedFrom(field: "creator")
}

enum WorkstreamStatus {
  Started
  Evaluation
  Closed
}

type Workstream @entity {
  id: ID!
  name: String
  coordinator: User
  deadline: BigInt
  contributors: [WorkstreamContributor!] @derivedFrom(field: "workstream")
  evaluations: [Evaluation!] @derivedFrom(field: "workstream")
  funding: [WorkstreamBalance!] @derivedFrom(field: "workstream")
  contestings: [WorkstreamContestation!] @derivedFrom(field: "workstream")
  rewardDistribution: RewardDistribution
  uri: String
  status: WorkstreamStatus
}

type RewardDistribution @entity {
  id: ID!
  workstream: Workstream!
  contributors: [User!]!
  shares: [BigInt!]!
}

type Evaluation @entity {
  id: ID!
  creator: User!
  workstream: Workstream!
  contributor: User!
  rating: BigInt!
}

type WorkstreamContributor @entity {
  id: ID!
  workstream: Workstream!
  contributor: User!
  commitment: BigInt
  active: Boolean
}

type Token @entity {
  id: ID!
  tokenID: BigInt
  name: String
  symbol: String
  userBalances: [UserBalance!] @derivedFrom(field: "token")
  workstreamBalance: [WorkstreamBalance!] @derivedFrom(field: "token")
}

type UserBalance @entity {
  id: ID!
  user: User!
  token: Token!
  amount: BigInt!
}

type WorkstreamBalance @entity {
  id: ID!
  workstream: Workstream!
  token: Token!
  amount: BigInt!
}

type WorkstreamContestation @entity {
  id: ID!
  user: User!
  workstream: Workstream!
  uri: String!
}
