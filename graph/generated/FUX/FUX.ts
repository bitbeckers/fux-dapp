// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ContributorsUpdated extends ethereum.Event {
  get params(): ContributorsUpdated__Params {
    return new ContributorsUpdated__Params(this);
  }
}

export class ContributorsUpdated__Params {
  _event: ContributorsUpdated;

  constructor(event: ContributorsUpdated) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contributors(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get add(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EvaluationSubmitted extends ethereum.Event {
  get params(): EvaluationSubmitted__Params {
    return new EvaluationSubmitted__Params(this);
  }
}

export class EvaluationSubmitted__Params {
  _event: EvaluationSubmitted;

  constructor(event: EvaluationSubmitted) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contributors(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get ratings(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class FuxClaimed extends ethereum.Event {
  get params(): FuxClaimed__Params {
    return new FuxClaimed__Params(this);
  }
}

export class FuxClaimed__Params {
  _event: FuxClaimed;

  constructor(event: FuxClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FuxGiven extends ethereum.Event {
  get params(): FuxGiven__Params {
    return new FuxGiven__Params(this);
  }
}

export class FuxGiven__Params {
  _event: FuxGiven;

  constructor(event: FuxGiven) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get workstreamID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FuxSBTMinted extends ethereum.Event {
  get params(): FuxSBTMinted__Params {
    return new FuxSBTMinted__Params(this);
  }
}

export class FuxSBTMinted__Params {
  _event: FuxSBTMinted;

  constructor(event: FuxSBTMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fuxID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FuxWithdrawn extends ethereum.Event {
  get params(): FuxWithdrawn__Params {
    return new FuxWithdrawn__Params(this);
  }
}

export class FuxWithdrawn__Params {
  _event: FuxWithdrawn;

  constructor(event: FuxWithdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get workstreamID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StateUpdated extends ethereum.Event {
  get params(): StateUpdated__Params {
    return new StateUpdated__Params(this);
  }
}

export class StateUpdated__Params {
  _event: StateUpdated;

  constructor(event: StateUpdated) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedWorkstreamURI extends ethereum.Event {
  get params(): UpdatedWorkstreamURI__Params {
    return new UpdatedWorkstreamURI__Params(this);
  }
}

export class UpdatedWorkstreamURI__Params {
  _event: UpdatedWorkstreamURI;

  constructor(event: UpdatedWorkstreamURI) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WorkstreamClosed extends ethereum.Event {
  get params(): WorkstreamClosed__Params {
    return new WorkstreamClosed__Params(this);
  }
}

export class WorkstreamClosed__Params {
  _event: WorkstreamClosed;

  constructor(event: WorkstreamClosed) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contributors(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get vFux(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class WorkstreamContested extends ethereum.Event {
  get params(): WorkstreamContested__Params {
    return new WorkstreamContested__Params(this);
  }
}

export class WorkstreamContested__Params {
  _event: WorkstreamContested;

  constructor(event: WorkstreamContested) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class WorkstreamMinted extends ethereum.Event {
  get params(): WorkstreamMinted__Params {
    return new WorkstreamMinted__Params(this);
  }
}

export class WorkstreamMinted__Params {
  _event: WorkstreamMinted;

  constructor(event: WorkstreamMinted) {
    this._event = event;
  }

  get workstreamID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardsToken(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get rewards(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get metadataUri(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class FUX__getEvaluationResultEvaluationStruct extends ethereum.Tuple {
  get contributors(): Array<Address> {
    return this[0].toAddressArray();
  }

  get ratings(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class FUX__getWorkstreamResultWorkstreamStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }

  get state(): i32 {
    return this[3].toI32();
  }

  get exists(): boolean {
    return this[4].toBoolean();
  }
}

export class FUX extends ethereum.SmartContract {
  static bind(address: Address): FUX {
    return new FUX("FUX", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FUX_TOKEN_ID(): BigInt {
    let result = super.call("FUX_TOKEN_ID", "FUX_TOKEN_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FUX_TOKEN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FUX_TOKEN_ID", "FUX_TOKEN_ID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPGRADER_ROLE(): Bytes {
    let result = super.call("UPGRADER_ROLE", "UPGRADER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_UPGRADER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "UPGRADER_ROLE",
      "UPGRADER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  URI_SETTER_ROLE(): Bytes {
    let result = super.call(
      "URI_SETTER_ROLE",
      "URI_SETTER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_URI_SETTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "URI_SETTER_ROLE",
      "URI_SETTER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VFUX_TOKEN_ID(): BigInt {
    let result = super.call("VFUX_TOKEN_ID", "VFUX_TOKEN_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VFUX_TOKEN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "VFUX_TOKEN_ID",
      "VFUX_TOKEN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCommitment(user: Address, workstreamID: BigInt): BigInt {
    let result = super.call(
      "getCommitment",
      "getCommitment(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(workstreamID)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCommitment(
    user: Address,
    workstreamID: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitment",
      "getCommitment(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(workstreamID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEvaluation(
    user: Address,
    workstreamID: BigInt
  ): FUX__getEvaluationResultEvaluationStruct {
    let result = super.call(
      "getEvaluation",
      "getEvaluation(address,uint256):((address[],uint256[]))",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(workstreamID)
      ]
    );

    return changetype<FUX__getEvaluationResultEvaluationStruct>(
      result[0].toTuple()
    );
  }

  try_getEvaluation(
    user: Address,
    workstreamID: BigInt
  ): ethereum.CallResult<FUX__getEvaluationResultEvaluationStruct> {
    let result = super.tryCall(
      "getEvaluation",
      "getEvaluation(address,uint256):((address[],uint256[]))",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(workstreamID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FUX__getEvaluationResultEvaluationStruct>(value[0].toTuple())
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getWorkstream(
    workstreamID: BigInt
  ): FUX__getWorkstreamResultWorkstreamStruct {
    let result = super.call(
      "getWorkstream",
      "getWorkstream(uint256):((string,address,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(workstreamID)]
    );

    return changetype<FUX__getWorkstreamResultWorkstreamStruct>(
      result[0].toTuple()
    );
  }

  try_getWorkstream(
    workstreamID: BigInt
  ): ethereum.CallResult<FUX__getWorkstreamResultWorkstreamStruct> {
    let result = super.tryCall(
      "getWorkstream",
      "getWorkstream(uint256):((string,address,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(workstreamID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FUX__getWorkstreamResultWorkstreamStruct>(value[0].toTuple())
    );
  }

  getWorkstreamRewards(workstreamID: BigInt, token: Address): BigInt {
    let result = super.call(
      "getWorkstreamRewards",
      "getWorkstreamRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(workstreamID),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getWorkstreamRewards(
    workstreamID: BigInt,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWorkstreamRewards",
      "getWorkstreamRewards(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(workstreamID),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  readWorkstreamState(workstreamID: BigInt): string {
    let result = super.call(
      "readWorkstreamState",
      "readWorkstreamState(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(workstreamID)]
    );

    return result[0].toString();
  }

  try_readWorkstreamState(workstreamID: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "readWorkstreamState",
      "readWorkstreamState(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(workstreamID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  sbtIds(param0: BigInt): Address {
    let result = super.call("sbtIds", "sbtIds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_sbtIds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("sbtIds", "sbtIds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseWorkstreamCall extends ethereum.Call {
  get inputs(): CloseWorkstreamCall__Inputs {
    return new CloseWorkstreamCall__Inputs(this);
  }

  get outputs(): CloseWorkstreamCall__Outputs {
    return new CloseWorkstreamCall__Outputs(this);
  }
}

export class CloseWorkstreamCall__Inputs {
  _call: CloseWorkstreamCall;

  constructor(call: CloseWorkstreamCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class CloseWorkstreamCall__Outputs {
  _call: CloseWorkstreamCall;

  constructor(call: CloseWorkstreamCall) {
    this._call = call;
  }
}

export class CommitToWorkstreamCall extends ethereum.Call {
  get inputs(): CommitToWorkstreamCall__Inputs {
    return new CommitToWorkstreamCall__Inputs(this);
  }

  get outputs(): CommitToWorkstreamCall__Outputs {
    return new CommitToWorkstreamCall__Outputs(this);
  }
}

export class CommitToWorkstreamCall__Inputs {
  _call: CommitToWorkstreamCall;

  constructor(call: CommitToWorkstreamCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fuxGiven(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CommitToWorkstreamCall__Outputs {
  _call: CommitToWorkstreamCall;

  constructor(call: CommitToWorkstreamCall) {
    this._call = call;
  }
}

export class FinalizeWorkstreamCall extends ethereum.Call {
  get inputs(): FinalizeWorkstreamCall__Inputs {
    return new FinalizeWorkstreamCall__Inputs(this);
  }

  get outputs(): FinalizeWorkstreamCall__Outputs {
    return new FinalizeWorkstreamCall__Outputs(this);
  }
}

export class FinalizeWorkstreamCall__Inputs {
  _call: FinalizeWorkstreamCall;

  constructor(call: FinalizeWorkstreamCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get vFuxGiven(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class FinalizeWorkstreamCall__Outputs {
  _call: FinalizeWorkstreamCall;

  constructor(call: FinalizeWorkstreamCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintFuxCall extends ethereum.Call {
  get inputs(): MintFuxCall__Inputs {
    return new MintFuxCall__Inputs(this);
  }

  get outputs(): MintFuxCall__Outputs {
    return new MintFuxCall__Outputs(this);
  }
}

export class MintFuxCall__Inputs {
  _call: MintFuxCall;

  constructor(call: MintFuxCall) {
    this._call = call;
  }
}

export class MintFuxCall__Outputs {
  _call: MintFuxCall;

  constructor(call: MintFuxCall) {
    this._call = call;
  }
}

export class MintWorkstreamCall extends ethereum.Call {
  get inputs(): MintWorkstreamCall__Inputs {
    return new MintWorkstreamCall__Inputs(this);
  }

  get outputs(): MintWorkstreamCall__Outputs {
    return new MintWorkstreamCall__Outputs(this);
  }
}

export class MintWorkstreamCall__Inputs {
  _call: MintWorkstreamCall;

  constructor(call: MintWorkstreamCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get coordinatorCommitment(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get rewardsTokens(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get rewards(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get metadataUri(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class MintWorkstreamCall__Outputs {
  _call: MintWorkstreamCall;

  constructor(call: MintWorkstreamCall) {
    this._call = call;
  }
}

export class PostContestationCall extends ethereum.Call {
  get inputs(): PostContestationCall__Inputs {
    return new PostContestationCall__Inputs(this);
  }

  get outputs(): PostContestationCall__Outputs {
    return new PostContestationCall__Outputs(this);
  }
}

export class PostContestationCall__Inputs {
  _call: PostContestationCall;

  constructor(call: PostContestationCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class PostContestationCall__Outputs {
  _call: PostContestationCall;

  constructor(call: PostContestationCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get tokenID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newuri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class SetWorkstreamToEvaluationCall extends ethereum.Call {
  get inputs(): SetWorkstreamToEvaluationCall__Inputs {
    return new SetWorkstreamToEvaluationCall__Inputs(this);
  }

  get outputs(): SetWorkstreamToEvaluationCall__Outputs {
    return new SetWorkstreamToEvaluationCall__Outputs(this);
  }
}

export class SetWorkstreamToEvaluationCall__Inputs {
  _call: SetWorkstreamToEvaluationCall;

  constructor(call: SetWorkstreamToEvaluationCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWorkstreamToEvaluationCall__Outputs {
  _call: SetWorkstreamToEvaluationCall;

  constructor(call: SetWorkstreamToEvaluationCall) {
    this._call = call;
  }
}

export class SetWorkstreamURICall extends ethereum.Call {
  get inputs(): SetWorkstreamURICall__Inputs {
    return new SetWorkstreamURICall__Inputs(this);
  }

  get outputs(): SetWorkstreamURICall__Outputs {
    return new SetWorkstreamURICall__Outputs(this);
  }
}

export class SetWorkstreamURICall__Inputs {
  _call: SetWorkstreamURICall;

  constructor(call: SetWorkstreamURICall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newuri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetWorkstreamURICall__Outputs {
  _call: SetWorkstreamURICall;

  constructor(call: SetWorkstreamURICall) {
    this._call = call;
  }
}

export class SubmitEvaluationCall extends ethereum.Call {
  get inputs(): SubmitEvaluationCall__Inputs {
    return new SubmitEvaluationCall__Inputs(this);
  }

  get outputs(): SubmitEvaluationCall__Outputs {
    return new SubmitEvaluationCall__Outputs(this);
  }
}

export class SubmitEvaluationCall__Inputs {
  _call: SubmitEvaluationCall;

  constructor(call: SubmitEvaluationCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get ratings(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SubmitEvaluationCall__Outputs {
  _call: SubmitEvaluationCall;

  constructor(call: SubmitEvaluationCall) {
    this._call = call;
  }
}

export class UpdateContributorsCall extends ethereum.Call {
  get inputs(): UpdateContributorsCall__Inputs {
    return new UpdateContributorsCall__Inputs(this);
  }

  get outputs(): UpdateContributorsCall__Outputs {
    return new UpdateContributorsCall__Outputs(this);
  }
}

export class UpdateContributorsCall__Inputs {
  _call: UpdateContributorsCall;

  constructor(call: UpdateContributorsCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contributors(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get add(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateContributorsCall__Outputs {
  _call: UpdateContributorsCall;

  constructor(call: UpdateContributorsCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawFromWorkstreamCall extends ethereum.Call {
  get inputs(): WithdrawFromWorkstreamCall__Inputs {
    return new WithdrawFromWorkstreamCall__Inputs(this);
  }

  get outputs(): WithdrawFromWorkstreamCall__Outputs {
    return new WithdrawFromWorkstreamCall__Outputs(this);
  }
}

export class WithdrawFromWorkstreamCall__Inputs {
  _call: WithdrawFromWorkstreamCall;

  constructor(call: WithdrawFromWorkstreamCall) {
    this._call = call;
  }

  get workstreamID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromWorkstreamCall__Outputs {
  _call: WithdrawFromWorkstreamCall;

  constructor(call: WithdrawFromWorkstreamCall) {
    this._call = call;
  }
}
