// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("fuxer", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fuxer(): boolean {
    let value = this.get("fuxer");
    return value!.toBoolean();
  }

  set fuxer(value: boolean) {
    this.set("fuxer", Value.fromBoolean(value));
  }

  get balances(): Array<string> | null {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set balances(value: Array<string> | null) {
    if (!value) {
      this.unset("balances");
    } else {
      this.set("balances", Value.fromStringArray(<Array<string>>value));
    }
  }

  get workstreams(): Array<string> | null {
    let value = this.get("workstreams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set workstreams(value: Array<string> | null) {
    if (!value) {
      this.unset("workstreams");
    } else {
      this.set("workstreams", Value.fromStringArray(<Array<string>>value));
    }
  }

  get rewards(): BigInt | null {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewards(value: BigInt | null) {
    if (!value) {
      this.unset("rewards");
    } else {
      this.set("rewards", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Workstream extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Workstream entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Workstream entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Workstream", id.toString(), this);
    }
  }

  static load(id: string): Workstream | null {
    return changetype<Workstream | null>(store.get("Workstream", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get coordinator(): string | null {
    let value = this.get("coordinator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set coordinator(value: string | null) {
    if (!value) {
      this.unset("coordinator");
    } else {
      this.set("coordinator", Value.fromString(<string>value));
    }
  }

  get contributors(): Array<string> | null {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set contributors(value: Array<string> | null) {
    if (!value) {
      this.unset("contributors");
    } else {
      this.set("contributors", Value.fromStringArray(<Array<string>>value));
    }
  }

  get evaluations(): Array<string> | null {
    let value = this.get("evaluations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set evaluations(value: Array<string> | null) {
    if (!value) {
      this.unset("evaluations");
    } else {
      this.set("evaluations", Value.fromStringArray(<Array<string>>value));
    }
  }

  get funding(): BigInt | null {
    let value = this.get("funding");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set funding(value: BigInt | null) {
    if (!value) {
      this.unset("funding");
    } else {
      this.set("funding", Value.fromBigInt(<BigInt>value));
    }
  }

  get deadline(): BigInt | null {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deadline(value: BigInt | null) {
    if (!value) {
      this.unset("deadline");
    } else {
      this.set("deadline", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }
}

export class Evaluation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromString(""));
    this.set("workstream", Value.fromString(""));
    this.set("contributor", Value.fromString(""));
    this.set("rating", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Evaluation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Evaluation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Evaluation", id.toString(), this);
    }
  }

  static load(id: string): Evaluation | null {
    return changetype<Evaluation | null>(store.get("Evaluation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get workstream(): string {
    let value = this.get("workstream");
    return value!.toString();
  }

  set workstream(value: string) {
    this.set("workstream", Value.fromString(value));
  }

  get contributor(): string {
    let value = this.get("contributor");
    return value!.toString();
  }

  set contributor(value: string) {
    this.set("contributor", Value.fromString(value));
  }

  get rating(): BigInt {
    let value = this.get("rating");
    return value!.toBigInt();
  }

  set rating(value: BigInt) {
    this.set("rating", Value.fromBigInt(value));
  }
}

export class WorkstreamContributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("workstream", Value.fromString(""));
    this.set("contributor", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WorkstreamContributor entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WorkstreamContributor entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WorkstreamContributor", id.toString(), this);
    }
  }

  static load(id: string): WorkstreamContributor | null {
    return changetype<WorkstreamContributor | null>(
      store.get("WorkstreamContributor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get workstream(): string {
    let value = this.get("workstream");
    return value!.toString();
  }

  set workstream(value: string) {
    this.set("workstream", Value.fromString(value));
  }

  get contributor(): string {
    let value = this.get("contributor");
    return value!.toString();
  }

  set contributor(value: string) {
    this.set("contributor", Value.fromString(value));
  }

  get commitment(): BigInt | null {
    let value = this.get("commitment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set commitment(value: BigInt | null) {
    if (!value) {
      this.unset("commitment");
    } else {
      this.set("commitment", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get tokenBalances(): Array<string> | null {
    let value = this.get("tokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("tokenBalances");
    } else {
      this.set("tokenBalances", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("token", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenBalance", id.toString(), this);
    }
  }

  static load(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(store.get("TokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
